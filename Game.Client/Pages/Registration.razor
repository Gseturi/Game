@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject HttpClient Client

<h3>Register</h3>

<EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="registrationModel.Username" />
        <ValidationMessage For="@(() => registrationModel.Username)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
        <ValidationMessage For="@(() => registrationModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="registrationModel.Password" />
        <ValidationMessage For="@(() => registrationModel.Password)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Register</button>
    </div>
</EditForm>




@code {
    private RegistrationModel registrationModel = new RegistrationModel();


    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine($"Submitting form for Username: {registrationModel.Username}, Email: {registrationModel.Email}");
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    /*  private async Task HandleValidSubmit()
    {
        try
        {




            var response = await Client.PostAsJsonAsync(Navigation.BaseUri + "/Registerr", registrationModel);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Username: {registrationModel.Username}, Email: {registrationModel.Email}");
                Navigation.NavigateTo("/");
            }
            else
            {
                // Handle the error response
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Registration failed: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }*/
  

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; }
    }
}
